# Makefile para SatoLang
# Linguagens e Paradigmas - APS Etapa 2
#
# Compila o analisador l√©xico (Flex) e sint√°tico (Bison)
# para a linguagem SatoLang

# Compilador e flags
CC = gcc
CFLAGS = -Wall -g
# No macOS, n√£o precisamos de -lfl (biblioteca Flex)
# Em Linux, pode ser necess√°rio descomentar: LDFLAGS = -lfl
LDFLAGS =

# Arquivos fonte
LEXER = lexer.l
PARSER = parser.y

# Arquivos gerados
PARSER_C = parser.tab.c
PARSER_H = parser.tab.h
LEXER_C = lex.yy.c

# Execut√°vel final
TARGET = btc_parser

# Arquivo de exemplo
EXAMPLE = exemplo.btc

# ========== REGRAS DE COMPILA√á√ÉO ==========

# Regra padr√£o: compila tudo
all: $(TARGET)
	@echo ""
	@echo "‚úÖ Compila√ß√£o conclu√≠da com sucesso!"
	@echo "   Execute: ./$(TARGET) < $(EXAMPLE)"
	@echo "   Ou:      ./$(TARGET) $(EXAMPLE)"
	@echo ""

# Compila o execut√°vel final
$(TARGET): $(PARSER_C) $(LEXER_C)
	@echo "üîó Linkando arquivos objeto..."
	$(CC) $(CFLAGS) -o $(TARGET) $(PARSER_C) $(LEXER_C) $(LDFLAGS)

# Gera o parser com Bison
$(PARSER_C): $(PARSER)
	@echo "üî® Gerando parser com Bison..."
	bison -d -o $(PARSER_C) $(PARSER)

# Gera o lexer com Flex
$(LEXER_C): $(LEXER)
	@echo "üî® Gerando lexer com Flex..."
	flex -o $(LEXER_C) $(LEXER)

# ========== REGRAS DE TESTE ==========

# Executa o parser com o arquivo de exemplo
test: $(TARGET)
	@echo ""
	@echo "üß™ Testando com arquivo de exemplo..."
	@echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
	./$(TARGET) $(EXAMPLE)
	@echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
	@echo ""

# Executa o parser lendo da entrada padr√£o
run: $(TARGET)
	@echo ""
	@echo "üìù Digite seu c√≥digo SatoLang (Ctrl+D para finalizar):"
	@echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
	./$(TARGET)

# ========== REGRAS DE LIMPEZA ==========

# Remove arquivos gerados
clean:
	@echo "üßπ Limpando arquivos gerados..."
	rm -f $(TARGET) $(PARSER_C) $(PARSER_H) $(LEXER_C)
	rm -f *.o
	@echo "‚úÖ Limpeza conclu√≠da!"

# Remove tudo e recompila
rebuild: clean all

# ========== REGRAS DE AJUDA ==========

help:
	@echo ""
	@echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
	@echo "‚ïë   SatoLang - Makefile                                 ‚ïë"
	@echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
	@echo ""
	@echo "Comandos dispon√≠veis:"
	@echo ""
	@echo "  make          - Compila o parser"
	@echo "  make test     - Compila e testa com exemplo.btc"
	@echo "  make run      - Compila e executa (l√™ da stdin)"
	@echo "  make clean    - Remove arquivos gerados"
	@echo "  make rebuild  - Limpa e recompila tudo"
	@echo "  make help     - Exibe esta mensagem"
	@echo ""
	@echo "Uso do parser:"
	@echo ""
	@echo "  ./$(TARGET) arquivo.btc    - Analisa um arquivo"
	@echo "  ./$(TARGET) < arquivo.btc  - Analisa via redirecionamento"
	@echo "  ./$(TARGET)                - L√™ da entrada padr√£o"
	@echo ""

# Declara regras que n√£o geram arquivos
.PHONY: all test run clean rebuild help

